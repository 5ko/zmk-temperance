/*
 * Copyright (c) 2024 Petko Yotov pmwiki.org/petko
 *
 * SPDX-License-Identifier: MIT
 */


// should work both on Ubuntu and MacOSX
ZMK_MACRO(nxkbly,  bindings = <&kp GLOBE &kp LA(LSHFT)> ;)

// Simple macros
ZMK_MACRO(tap_th,  bindings = <&kp T &kp H> ;)
ZMK_MACRO(https,   bindings = <&kp H &kp T &kp T &kp P &kp S 
                      &kp COLON &kp SLASH &kp SLASH 
                      &kp W &kp W &kp W &kp DOT > ;)
ZMK_MACRO(tap_the, bindings = <&kp T &kp H &kp E> ;)
ZMK_MACRO(ing,     bindings = <&kp I &kp N &kp G> ;)
ZMK_MACRO(ion,     bindings = <&kp I &kp O &kp N> ;)
ZMK_MACRO(tion,    bindings = <&kp T &kp I &kp O &kp N> ;)
ZMK_MACRO(a_grave, bindings = <&kp D_GRV &kp A> ;)
ZMK_MACRO(a_circ,  bindings = <&kp D_CRC &kp A> ;)
ZMK_MACRO(e_acute, bindings = <&kp D_ACU &kp E> ;)
ZMK_MACRO(e_circ,  bindings = <&kp D_CRC &kp E> ;)
ZMK_MACRO(e_grave, bindings = <&kp D_GRV &kp E> ;)
ZMK_MACRO(e_dier,  bindings = <&kp D_DRS &kp E> ;)
ZMK_MACRO(u_grave, bindings = <&kp D_GRV &kp U> ;)
ZMK_MACRO(u_circ,  bindings = <&kp D_CRC &kp U> ;)
ZMK_MACRO(i_circ,  bindings=< &kp D_CRC &kp I >;)
ZMK_MACRO(i_dier,  bindings = <&kp D_DRS &kp I> ;)
ZMK_MACRO(o_circ,  bindings = <&kp D_CRC &kp O> ;)
ZMK_MACRO(u_dier,  bindings = <&kp D_DRS &kp U> ;)

// Simple hold-tabs, hold-preferred
#define HTHP(name, ...) ZMK_HOLD_TAB(name, flavor = "hold-preferred"; \
    tapping-term-ms = <HOLDTAP_TERM>; __VA_ARGS__)

HTHP(sk_tk, bindings = <&sk>, <&kt>;) //sk LGUI kt LCTRL; sk RALT kt LALT
HTHP(kp_kt, bindings = <&kp>, <&kt>;) // kp_kt CAPS LSHFT
HTHP(nx_kp, bindings = <&nxkbly>, <&kp>;) // nxkbly, kp CAPS
HTHP(nx_sk, bindings = <&nxkbly>, <&sk>;) // nxkbly, sk LSHFT
HTHP(caps_tog, bindings = <&caps_word>, <&kp>;) // unused

HTHP(lk, bindings = <&lay_on>, <&kp>;) 
HTHP(the_th, bindings = <&tap_the>, <&tap_th>;) 
HTHP(ion_ing, bindings = <&ion>, <&ing>;) 
HTHP(a_grave_circ, bindings = <&a_circ>, <&a_grave>;) 
HTHP(e_acute_circ, bindings = <&e_circ>, <&e_acute>;) 
HTHP(e_grave_dier, bindings = <&e_dier>, <&e_grave>;) 
HTHP(u_grave_circ, bindings = <&u_circ>, <&u_grave>;) 
HTHP(i_circ_dier, bindings = <&i_dier>, <&i_circ>;) 
HTHP(o_circ_u_dier, bindings = <&u_dier>, <&o_circ>;) 
HTHP(hold_esc, bindings = <&unmod>, <&kp>;) 



/ { behaviors {
  mtz: behavior_mod_tap_zero {
    // 
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "hold-preferred";
    tapping-term-ms = <10>;
//     quick-tap-ms = <200>;
//     require-prior-idle-ms = <125>;
    bindings = <&kp>, <&kp>;
  };
  
//   sk_tk: behavior_sk_tk { 
//     // sk LGUI, kt LCTRL
//     // sk RALT, kt LALT
//     compatible = "zmk,behavior-hold-tap";
//     #binding-cells = <2>;
//     flavor = "hold-preferred";
//     tapping-term-ms = <HOLDTAP_TERM>;
//     bindings = <&sk>, <&kt>;
//   };
  
  // kp_kt CAPS LSHFT
//   kp_kt: behavior_sk_tog2 { 
//     compatible = "zmk,behavior-hold-tap";
//     #binding-cells = <2>;
//     flavor = "hold-preferred";
//     tapping-term-ms = <HOLDTAP_TERM>;
//     bindings = <&kp>, <&kt>;
//   };
  
  // nxkbly, kp CAPS
//   nx_kp: behavior_nx_kp {
//     compatible = "zmk,behavior-hold-tap";
//     #binding-cells = <2>;
//     flavor = "hold-preferred";
//     tapping-term-ms = <HOLDTAP_TERM>;
//     bindings = <&nxkbly>, <&kp>;
//   };
//   
  
  
  // nxkbly, sk LSHFT
//   nx_sk: behavior_sk_tog3 {
//     compatible = "zmk,behavior-hold-tap";
//     #binding-cells = <2>;
//     flavor = "hold-preferred";
//     tapping-term-ms = <HOLDTAP_TERM>;
//     bindings = <&nxkbly>, <&sk>;
//   };
  
  
  tap2: macro_tap_2 {
    compatible = "zmk,behavior-macro-two-param";
    wait-ms = <40>;
    tap-ms = <40>;
    #binding-cells = <2>;
    bindings
      = <&macro_param_1to1>
      , <&macro_tap &kp MACRO_PLACEHOLDER>
      , <&macro_param_2to1>
      , <&macro_tap &kp MACRO_PLACEHOLDER>
      ;
  };
  
  
//   caps_tog: behavior_caps_tog {
//     compatible = "zmk,behavior-hold-tap";
//     #binding-cells = <2>;
//     flavor = "hold-preferred";
//     tapping-term-ms = <HOLDTAP_TERM>;
//     bindings = <&caps_word>, <&kp>;
//   };
  
  lk_prev: behavior_layon_key {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "hold-preferred";
    tapping-term-ms = <HOLDTAP_LAYER_TERM>;
    bindings = <&lay_on>, <&kp>;
  };
  
  kd: behavior_keydown {
    compatible = "zmk,behavior-key-toggle";
    #binding-cells = <1>;
    display-name = "Key Toggle On";
    toggle-mode = "on";
  };

  ku: behavior_keyup {
    compatible = "zmk,behavior-key-toggle";
    #binding-cells = <1>;
    display-name = "Key Toggle Off";
    toggle-mode = "off";
  };
  
  lay_off: behavior_layer_off {
    compatible = "zmk,behavior-toggle-layer";
    #binding-cells = <1>;
    display-name = "Toggle Layer Off";
    toggle-mode = "off";

  };
  lay_on: behavior_layer_om {
    compatible = "zmk,behavior-toggle-layer";
    #binding-cells = <1>;
    display-name = "Toggle Layer On";
    toggle-mode = "on";

  };
    
  unmod: macro_release_mods {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings
      = <&lay_off L_MSE &lay_off L_BLE &lay_off L_NUM
         &lay_off L_ACC &lay_off L_EDT &lay_off L_FUN>
      , <&ku LSHFT &ku LCTRL &ku LALT &ku RALT &ku LGUI>
      ;
  };
  

//   the_th: behavior_the_th {
//     compatible = "zmk,behavior-hold-tap";
//     #binding-cells = <2>;
//     flavor = "hold-preferred";
//     tapping-term-ms = <HOLDTAP_TERM>;
//     bindings = <&tap_the>, <&tap_th>;
//   };
  
  
//   ion_ing: behavior_ion_ing {
//     compatible = "zmk,behavior-hold-tap";
//     #binding-cells = <2>;
//     flavor = "hold-preferred";
//     tapping-term-ms = <HOLDTAP_TERM>;
//     bindings = <&ion>, <&ing>;
//   };
  
//   a_grave_circ: behavior_a_grave_circ {
//     compatible = "zmk,behavior-hold-tap";
//     #binding-cells = <2>;
//     flavor = "hold-preferred";
//     tapping-term-ms = <HOLDTAP_TERM>;
//     bindings = <&a_circ>, <&a_grave>;
//   };
  
  
//   e_acute_circ: behavior_e_acute_circ {
//     compatible = "zmk,behavior-hold-tap";
//     #binding-cells = <2>;
//     flavor = "hold-preferred";
//     tapping-term-ms = <HOLDTAP_TERM>;
//     bindings = <&e_circ>, <&e_acute>;
//   };
  
//   e_grave_dier: behavior_e_grave_dier{
//     compatible = "zmk,behavior-hold-tap";
//     #binding-cells = <2>;
//     flavor = "hold-preferred";
//     tapping-term-ms = <HOLDTAP_TERM>;
//     bindings = <&e_dier>, <&e_grave>;
//   };
  
  
//   u_grave_circ: behavior_u_grave_circ {
//     compatible = "zmk,behavior-hold-tap";
//     #binding-cells = <2>;
//     flavor = "hold-preferred";
//     tapping-term-ms = <HOLDTAP_TERM>;
//     bindings = <&u_circ>, <&u_grave>;
//   };
  
//   i_circ_dier: behavior_i_circ_dier {
//     compatible = "zmk,behavior-hold-tap";
//     #binding-cells = <2>;
//     flavor = "hold-preferred";
//     tapping-term-ms = <HOLDTAP_TERM>;
//     bindings = <&i_dier>, <&i_circ>;
//   };
  
//   o_circ_u_dier: behavior_o_circ_u_dier {
//     compatible = "zmk,behavior-hold-tap";
//     #binding-cells = <2>;
//     flavor = "hold-preferred";
//     tapping-term-ms = <HOLDTAP_TERM>;
//     bindings = <&u_dier>, <&o_circ>;
//   };
  
//   hold_esc: behavior_hold_escape {
//     compatible = "zmk,behavior-hold-tap";
//     #binding-cells = <2>;
//     flavor = "hold-preferred";
//     tapping-term-ms = <HOLDTAP_TERM>;
//     bindings = <&unmod>, <&kp>;
//   };
  

  
//   reib: macro_reib {
//     compatible = "zmk,behavior-macro";
//     #binding-cells = <0>;
//     wait-ms = <2500>;
//     bindings = 
//       // ALT REIB REIB &kp SYSREQ
//         <&macro_press &kp LSHFT>
//       , <&macro_tap &kp R &kp E &kp I &kp B>
//       , <&macro_release &kp LSHFT>
//     ;
//     
//   };

}; };


// Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer
#define SK_TK(key) &sk_tk key key

// Accented letters on L_ACC
#define A_IC_ID &i_circ_dier   0 0  
#define A_UG_UC &u_grave_circ 0 0 
#define A_AG_AC &a_grave_circ 0 0 
#define A_OC_UD &o_circ_u_dier 0 0
#define A_EG_ED &e_grave_dier 0 0 
#define A_EA_EC &e_acute_circ 0 0 


// #define TYPE(name, bindings) ZMK_MACRO(name, bindings=<bindings>;)

// TYPE(i_circ, )


