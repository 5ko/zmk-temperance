/*
 * Copyright (c) 2024 Petko Yotov pmwiki.org/petko
 *
 * SPDX-License-Identifier: MIT
 */


// TODO:
// Most used keyboard shortcuts Alt+Tab
// the most common letter pairs as " AN RE ER IN ON AT ES EN +OF TE OR TI +HI AS TO"
// 
// Unused combos that are relatively easy
// 
// _TB_, _BBT, _BTB 
// 
// Pinky+Ring (easier than pinky alone): 
// 
// TTB_, TTBB, TTTB, BBT_, BB_T, BBBT, BBBB
// 
// Pinky alone, maybe: 
// 
// TB__, T_B_, T_BB, TBBT, TBBB, BTTT, BTTB
// 
// 
// Change layout from LEFT to RIGHT hand
// XX__, __XX


// Tap dance is difficult with fingers 3 & 4, better use mod-taps

ZMK_TAP_DANCE(left_home,  tapping-term-ms = <NAV_TAP_TERM>;
              bindings = <&mt HOME LEFT>, <&kp LC(LEFT)>;  )
ZMK_TAP_DANCE(right_end, tapping-term-ms = <NAV_TAP_TERM>;
              bindings = <&mt END RIGHT>, <&kp LC(RIGHT)>;  )



// Base letter combos
ZMK_TAP_DANCE(td_S, tapping-term-ms = <TAPDANCE_3_TERM>;  
  bindings = <&lt L_PAR S>, <&kp STAR>, <&kp S_SRP>;)

ZMK_TAP_DANCE(td_T,  tapping-term-ms = <TAPDANCE_3_TERM>;
  bindings = <&lk L_NUM T>, <&tap2 D_GRV U>, <&tap2 D_CRC U>;)

ZMK_TAP_DANCE(td_O,  tapping-term-ms = <TAPDANCE_3_TERM>;
  bindings = <&lt L_PAR O>, <&tap2 D_CRC O>;)

ZMK_TAP_DANCE(td_A,  tapping-term-ms = <TAPDANCE_3_TERM>;
  bindings = <&lt L_ACC A>, <&tap2 D_GRV A>, <&tap2 D_CRC A>;)
//   bindings = <&mtz AT A>, <&tap2 D_GRV A>, <&tap2 D_CRC A>;)


ZMK_TAP_DANCE(td_I,  tapping-term-ms = <TAPDANCE_3_TERM>;
  bindings = <&lt L_PAR I>, <&tap2 D_CRC I>, <&tap2 D_DRS I>;)

ZMK_TAP_DANCE(td_N,  tapping-term-ms = <TAPDANCE_3_TERM>;
  bindings = <&lt L_NAV N>, <&kp NTILDE>;)

ZMK_TAP_DANCE(td_SP, tapping-term-ms = <TAPDANCE_3_TERM>;  
  bindings = <&mtz ENTER SPACE>, <&kp DOT>, <&kp COMMA>, <&kp EXCL>, <&kp QMARK>;)

ZMK_TAP_DANCE(td_E,  tapping-term-ms = <TAPDANCE_3_TERM>;
  bindings = <&lk L_EDT E>, <&tap2 D_ACU E>, <&tap2 D_GRV E>, <&tap2 D_CRC E>, <&tap2 D_DRS E>;)




// Combos NUM layer
ZMK_COMBO(layoff_num, &lay_off L_NUM, TT__ , L_NUM)
ZMK_COMBO(num_7, &mt DOLLAR N7,  __TT,  L_NUM)
ZMK_COMBO(num_8, &kp N8       ,  _TT_,  L_NUM)
ZMK_COMBO(num_9, &mt HASH   N9,  __BB,  L_NUM)
ZMK_COMBO(num_0, &mt DEGREE N0,  _BB_,  L_NUM)
ZMK_COMBO(num_E, &mt GBP  EURO,  _T_T,  L_NUM)
ZMK_COMBO(num_Y, &kp YEN      ,  _B_B,  L_NUM)
// can do combos x4-x3-x2 


// Combos NAV+Media layer
ZMK_COMBO(nav_pgup,  &mt LC(HOME) PG_UP,  __TT, L_NAV)
ZMK_COMBO(nav_pgdn,  &mt LC(END)  PG_DN,  __BB, L_NAV)
ZMK_COMBO(mute_play, &mt K_PP K_MUTE   ,  _TT_, L_NAV)




// Combos BLUETOOTH layer
ZMK_COMBO(layer_bt_select,          &sl L_BLE,  X__X) // ALL layers
ZMK_COMBO(bt_clear_current_profile, &bt BT_CLR, _XX_, L_BLE)
ZMK_COMBO(layoff_bt, &lay_off L_BLE, TT__ , L_BLE)


// Combos L_MSE  Mouse layer
ZMK_COMBO(layoff_mse, &lay_off L_MSE, TT__ , L_MSE)
ZMK_COMBO(lay_mouse, &tog L_MSE              , _TBT, L_BASE L_MSE)
ZMK_COMBO(combo_mb3,   &mkp MB3              , _T_T, L_MSE)
ZMK_COMBO(combo_mb4,   &mkp MB4              , _TT_, L_MSE)
ZMK_COMBO(combo_mb5,   &mkp MB5              , __TT, L_MSE)
ZMK_COMBO(combo_scroll_left,  &msc SCRL_LEFT , X___, L_MSE)
ZMK_COMBO(combo_scroll_right, &msc SCRL_RIGHT, ___X, L_MSE)


// Combos L_FUN layer
ZMK_COMBO(layoff_fun, &lay_off L_FUN, TT__ , L_FUN)

// Combos L_EDT layer
// ^C, ^X, ^V for applications that don't recognise ^INS
ZMK_COMBO(combo_copycut, &mt LC(X) LC(C)    , _TT_, L_EDT)
ZMK_COMBO(combo_paste12, &mt LC(LS(V)) LC(V), TT__, L_EDT)


// Combos L_PAR layer
ZMK_COMBO(combo_eq, &mt TILDE EQUAL, __TT, L_PAR)


// Combos accented layer
ZMK_COMBO(combo_e_dier, &tap2 D_DRS E, __BB, L_ACC)


// Combos base letters
ZMK_COMBO(combo_b,  &mt AMPS  B, TT__ , L_BASE)
ZMK_COMBO(combo_c,  &mt C_CDL C, _TT_ , L_BASE) // C_CDL = Cyrillic Cha
ZMK_COMBO(combo_d,  &mt DLLR  D, __TT , L_BASE)

ZMK_COMBO(combo_h,  &mt HASH  H, __BB , L_BASE)
ZMK_COMBO(combo_u,  &mt UNDER U, _BB_ , L_BASE)
ZMK_COMBO(combo_g,  &mt GBP   G, BBB_ , L_BASE)

ZMK_COMBO(combo_r,  &kp       R, BB__ , L_BASE)
ZMK_COMBO(combo_j,  &kp       J, T_T_ , L_BASE)
ZMK_COMBO(combo_k,  &mt AELIG K, _T_T , L_BASE) // AELIG = Cyrillic Sha
ZMK_COMBO(combo_y,  &mt OELIG Y, _B_B , L_BASE) // OELIG = Cyrillic Shcha
ZMK_COMBO(combo_z,  &kp       Z, B_B_ , L_BASE)

ZMK_COMBO(combo_v,  &mt D_DRS V, T__T , L_BASE)
ZMK_COMBO(combo_x,  &mt D_CRC X, B__B , L_BASE)

ZMK_COMBO(combo_p,  &mt PIPE  P, TT_T , L_BASE)
ZMK_COMBO(combo_q,  &mt PRCNT Q, BB_B , L_BASE)

ZMK_COMBO(combo_l,  &mt PLUS  L, _TTT , L_BASE L_NUM)
ZMK_COMBO(combo_m,  &mt MINUS M, _BBB , L_BASE L_NUM)

ZMK_COMBO(combo_f,  &lk L_FUN F, TTT_ , L_BASE)
ZMK_COMBO(combo_w,  &mt AT    W, TTTT , L_BASE)

// ZMK_COMBO(combo_sp, &mt ENTER SPACE, B4 B3 B2 B1, L_BASE L_NUM)

// Common bigrams, with letters on the same finger, or require combos
// ZMK_COMBO(combo_st,  &tap2 S T,       B3 T2   , L_BASE)
// ZMK_COMBO(combo_ed,  &tap2 E D,       T2 T1 B1, L_BASE)
// ZMK_COMBO(combo_nd,  &tap2 N D, B4    T2 T1   , L_BASE)
// ZMK_COMBO(combo_he,  &tap2 H E,    B2 T1 B1   , L_BASE)
// ZMK_COMBO(combo_tion, &tion   , B4 B3 T2      , L_BASE)
// ZMK_COMBO(combo_th,  &the_th  0 0,    T2 B2 B1, L_BASE)
// ZMK_COMBO(combo_ing, &ion_ing 0 0, B4 T3 B3   , L_BASE)



// Base punctuation
ZMK_COMBO(combo_slash, &mt D_ACU SLASH, B__T, L_BASE L_NUM)
ZMK_COMBO(combo_backs, &mt D_GRV BSLH , T__B, L_BASE L_NUM)
ZMK_COMBO(combo_exclq, &mt QMARK EXCL , X___, L_BASE L_NUM)
ZMK_COMBO(combo_quote, &mt DQT SQT    , _X__, L_BASE L_NUM)
ZMK_COMBO(combo_comma, &mt COLON SEMI , __X_, L_BASE L_NUM)
ZMK_COMBO(combo_colon, &mt DOT COMMA  , ___X, L_BASE L_NUM)


// GLOBAL Combos 
ZMK_COMBO(combo_backspace, &mt LC(BSPC) BSPC, __TB, L_BASE L_MSE L_NUM)
ZMK_COMBO(combo_delete,    &mt LC(DEL)  DEL , __BT, L_BASE L_MSE L_NUM)
// ZMK_COMBO(combo_escape,    &hold_esc  0 ESC , BT__ , ALL_LEFT)
ZMK_COMBO(combo_escape,    &mt &unmod 0  ESC, BT__ , ALL_LEFT)
ZMK_COMBO(combo_tab,       &mt LS(TAB)  TAB , BTT_ , L_BASE L_MSE L_NUM)

// Hold for sticky RALT (one shot), tap to toggle LALT
ZMK_COMBO(combo_alt,    &sk_tk RALT LALT   , _TBB, L_BASE L_MSE L_NUM L_FUN)
// Hold for sticky LGUI (one shot), tap to toggle LCTRL
ZMK_COMBO(combo_ctrl,   &sk_tk LGUI LCTRL  , _TTB, L_BASE L_MSE L_NUM L_FUN)
// Hold for CAPS, tap to toggle LSHFT
ZMK_COMBO(combo_shift,  &kp_kt CAPS LSHFT  , _T_B, L_BASE L_MSE L_NUM L_FUN)
// Hold for NEXTLAYOUT (Alt+Shift), tap for sticky LSHFT (one-shot)
ZMK_COMBO(combo_shift1, &nx_sk 0    LSHFT  , _B_T, L_BASE L_MSE L_NUM L_FUN)



// ZMK_COMBO(name, bindings, keypos, layers, timeout, prior_idle, extra)
ZMK_COMBO(combo_reset,   &sys_reset,  XXXX)
ZMK_COMBO(combo_reflash, &bootloader, BBBX, ALL_LEFT)


