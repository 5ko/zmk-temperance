/*
 * Copyright (c) 2024 Petko Yotov pmwiki.org/petko
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 600  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 6    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/pointing.h>

// HOST_OS: Linux=1, MacOS=2
#define HOST_OS 1
#include "zmk-helpers/helper.h"

#include "keyabbrev.dtsi"
#include "characters.dtsi"




// Top row SITA
#define T4 0
#define T3 1
#define T2 2
#define T1 3
// Bottom row NO E
#define B4 4
#define B3 5
#define B2 6
#define B1 7

// The layers need to be numbered in the order they are below,
// starting from zero.
#define L_BASE 0
#define L_NUM  1
#define L_PAR  2
#define L_NAV  3
#define L_ACC  4
#define L_EDT  5
#define L_FUN  6
#define L_MSE  7
#define L_BLE  8

#define ALL_LEFT L_BASE L_MSE L_BLE L_NUM L_FUN

#define NS(name, keycode) ZMK_MOD_MORPH(name, \
  bindings = <&kp keycode>, <&kp keycode>;\
  keep-mods = <(MOD_RALT)>;\
  mods = <(MOD_RALT|MOD_LSFT|MOD_RSFT)>;)



#include "timeouts.dtsi"
#include "behaviors.dtsi"
#include "combos.dtsi"


// TODO: keymap for see keys marked TODO and MAYBE
//    HOLD: J, K, Y, Z, YEN
//    MEH key
//    Layers: Hold-S, Hold-A


#define TODO      &none
#define MAYBE     &none
#define MT_SAVE   &mt SAVEAS SAVE
#define MT_COPY   &mt CCUT CCOPY
#define MT_PASTE  &mt CCUT CCOPY
#define MT_UNDO   &mt U_REDO  U_UNDO


/ { keymap { compatible = "zmk,keymap";
  left {
    display-name = "LEFT";
    // tap-dance doesn't work with layer-hold
    // unless we use non-momentary layers?
    bindings = <
      &td_N  &td_I  &td_T   &td_E
      &td_S  &td_O  &td_SP  &td_A
    >;
  };
  numbers {
    display-name = "L_NUM";
    bindings = <
      &mo L_NAV    &kp N3        &mt SUP2  N2  &mt DOT   N1
      &mt STAR N0  &lt L_PAR N6  &mt SPACE N5  &lt L_EDT N4
    >;
  };
  parentheses {
    display-name = "L_PAR";
    bindings = <
      TODO               MAYBE       &mt RBRC LBRC   &mt RPAR LPAR
      &mt TILDE EQUAL    &mo L_PAR   &mt GT   LT     &mt RBKT LBKT
    >;
  };

  navmedia {
    display-name = "L_NAV";
    bindings = <
      &mo L_NAV        &left_home           &right_end           &kp UP
      &kp PRINTSCREEN  &mt K_PREV K_VOL_DN  &mt K_NEXT K_VOL_UP  &kp DOWN
    >;
  };
  accented {
    // French freq: é è à; rarer than Z: ê ç ô â î û ù ï ü ë
    // Also available on tap-dances for A, E, I, O, U (on T)
    // Also dead `´¨^ available on hold-/\VX if needed for other letters
    display-name = "L_ACC";
    bindings = <
      &i_circ_dier   0 0  &u_grave_circ 0 0   &a_grave_circ 0 0  &mo L_ACC
      &o_circ_u_dier 0 0  &e_grave_dier 0 0   &e_acute_circ 0 0  &none
    >;
  };
  editing {
    display-name = "L_EDT";
    bindings = <
      MT_SAVE   MT_PASTE   MT_COPY   &mo L_EDT
      TODO      TODO       MT_UNDO   &kp INS
    >;
  };
  functionkeys {
    display-name = "L_FUN";
    bindings = <
      TODO   &mt F2 F1   &mt F4  F3   &mt F6  F5
      TODO   &mt F8 F7   &mt F10 F9   &mt F12 F11
    >;
  };
  mouse {
    display-name = "L_MOUSE";
    bindings = <
     &msc SCRL_UP    &mkp MB2       &mmv MOVE_UP   &mkp MB1
     &msc SCRL_DOWN  &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT
    >;
  };

  bluetooth {
    display-name = "L_BLE";
    bindings = <
      &out OUT_BLE   &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0
      &out OUT_USB   &bt BT_SEL 5  &bt BT_SEL 4  &bt BT_SEL 3
    >;
  };


}; };


